[
  {
    "extension": "revapi.java",
    "id": "java",
    "configuration": {
      "missing-classes": {
        "behavior": "report",
        "ignoreMissingAnnotations": false
      }
    }
  },
  {
    "extension": "revapi.filter",
    "configuration": {
      "elements": {
        "include": [
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.groups"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.helpers.spies"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.helpers.test"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.infrastructure"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.operators"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.operators.multi.processors"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.subscription"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.tuples"
          },
          {
            "matcher": "java-package",
            "match": "io.smallrye.mutiny.unchecked"
          }
        ]
      }
    }
  },
  {
    "extension": "revapi.differences",
    "id": "breaking-changes",
    "configuration": {
      "criticality": "highlight",
      "minSeverity": "POTENTIALLY_BREAKING",
      "minCriticality": "documented",
      "differences": [
        {
          "ignore": true,
          "regex": true,
          "code": ".+",
          "old": ".+org\\.reactivestreams\\..+",
          "new": ".+java\\.util\\.concurrent\\.Flow\\..+",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Subscription",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Subscriber<T>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Subscriber<U>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Subscriber<I>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Subscriber<O>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<T>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<O>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<U>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<I>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<O>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<io.smallrye.mutiny.GroupedMulti<K, V>>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<java.lang.Object>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<java.lang.Long>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<java.lang.Void>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<R>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<java.util.List<T>>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Publisher<io.smallrye.mutiny.Multi<T>>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Processor<I, O>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "regex": true,
          "code": "java.class.noLongerImplementsInterface",
          "old": ".+",
          "new": ".+",
          "interface": "org.reactivestreams.Processor<T, T>",
          "justification": "Migration from the legacy Reactive Streams APIs to the Java Flow APIs"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.MultiIfNoItem<T> io.smallrye.mutiny.Multi<T>::ifNoItem() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method io.smallrye.mutiny.groups.MultiIfNoItem<T> io.smallrye.mutiny.Multi<T>::ifNoItem() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi timeouts are an experimental feature.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.MultiIfNoItem<T> io.smallrye.mutiny.Multi<T>::ifNoItem()",
          "new": "method io.smallrye.mutiny.groups.MultiIfNoItem<T> io.smallrye.mutiny.Multi<T>::ifNoItem()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi timeouts are an experimental feature.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join()",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.groups.MultiIfNoItem<T>",
          "new": "class io.smallrye.mutiny.groups.MultiIfNoItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi timeouts are an experimental feature.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.groups.MultiOnItemTimeout<T>",
          "new": "class io.smallrye.mutiny.groups.MultiOnItemTimeout<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi timeouts are an experimental feature.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup2<T1, T2>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup2<T1, T2>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup3<T1, T2, T3>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup3<T1, T2, T3>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup4<T1, T2, T3, T4>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup4<T1, T2, T3, T4>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup5<T1, T2, T3, T4, T5>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup5<T1, T2, T3, T4, T5>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup6<T1, T2, T3, T4, T5, T6>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup6<T1, T2, T3, T4, T5, T6>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup7<T1, T2, T3, T4, T5, T6, T7>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup7<T1, T2, T3, T4, T5, T6, T7>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup8<T1, T2, T3, T4, T5, T6, T7, T8>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup8<T1, T2, T3, T4, T5, T6, T7, T8>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup9<T1, T2, T3, T4, T5, T6, T7, T8, T9>",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>) @ io.smallrye.mutiny.groups.UniAndGroup9<T1, T2, T3, T4, T5, T6, T7, T8, T9>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>)",
          "new": "method <O, I> io.smallrye.mutiny.Uni<O> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::combinedWith(java.lang.Class<I>, java.util.function.Function<java.util.List<I>, O>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"This is an experimental API\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.groups.UniJoin",
          "new": "class io.smallrye.mutiny.groups.UniJoin",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "new": "class io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi timeouts are an experimental feature.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "new": "method io.smallrye.mutiny.groups.UniJoin io.smallrye.mutiny.Uni<T>::join() @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"New API based on observations that Uni.combine() is often used with homogeneous types, and combination often just a mapping to a collection.\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.Context",
          "new": "class io.smallrye.mutiny.Context",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsUsing(java.util.function.LongFunction<java.lang.Long>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsUsing(java.util.function.LongFunction<java.lang.Long>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.MultiDemandPacing<T> io.smallrye.mutiny.Multi<T>::paceDemand() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method io.smallrye.mutiny.groups.MultiDemandPacing<T> io.smallrye.mutiny.Multi<T>::paceDemand() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand pacing is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <R> io.smallrye.mutiny.Multi<R> io.smallrye.mutiny.Multi<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Multi<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<R>>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method <R> io.smallrye.mutiny.Multi<R> io.smallrye.mutiny.Multi<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Multi<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<R>>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.ItemWithContext<T>",
          "new": "class io.smallrye.mutiny.ItemWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsUsing(java.util.function.LongFunction<java.lang.Long>)",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsUsing(java.util.function.LongFunction<java.lang.Long>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.MultiDemandPacing<T> io.smallrye.mutiny.Multi<T>::paceDemand()",
          "new": "method io.smallrye.mutiny.groups.MultiDemandPacing<T> io.smallrye.mutiny.Multi<T>::paceDemand()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand pacing is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <R> io.smallrye.mutiny.Multi<R> io.smallrye.mutiny.Multi<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Multi<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<R>>)",
          "new": "method <R> io.smallrye.mutiny.Multi<R> io.smallrye.mutiny.Multi<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Multi<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<R>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context)",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <R> io.smallrye.mutiny.Uni<R> io.smallrye.mutiny.Uni<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Uni<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Uni<R>>)",
          "new": "method <R> io.smallrye.mutiny.Uni<R> io.smallrye.mutiny.Uni<T>::withContext(java.util.function.BiFunction<io.smallrye.mutiny.Uni<T>, io.smallrye.mutiny.Context, io.smallrye.mutiny.Uni<R>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <T> io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.groups.MultiCreate::context(java.util.function.Function<io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<? extends T>>)",
          "new": "method <T> io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.groups.MultiCreate::context(java.util.function.Function<io.smallrye.mutiny.Context, io.smallrye.mutiny.Multi<? extends T>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.MultiReplay io.smallrye.mutiny.groups.MultiCreateBy::replaying()",
          "new": "method io.smallrye.mutiny.groups.MultiReplay io.smallrye.mutiny.groups.MultiCreateBy::replaying()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Replaying of Multi is an experimental feature in Mutiny 1.4.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.groups.MultiDemandPacing<T>",
          "new": "class io.smallrye.mutiny.groups.MultiDemandPacing<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand pacing is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.groups.MultiReplay",
          "new": "class io.smallrye.mutiny.groups.MultiReplay",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Replaying of Multi is an experimental feature in Mutiny 1.4.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.helpers.BlockingIterable<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asIterable(java.util.function.Supplier<io.smallrye.mutiny.Context>, int, java.util.function.Supplier<java.util.Queue<T>>)",
          "new": "method io.smallrye.mutiny.helpers.BlockingIterable<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asIterable(java.util.function.Supplier<io.smallrye.mutiny.Context>, int, java.util.function.Supplier<java.util.Queue<T>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.stream.Stream<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asStream(java.util.function.Supplier<io.smallrye.mutiny.Context>, int, java.util.function.Supplier<java.util.Queue<T>>)",
          "new": "method java.util.stream.Stream<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asStream(java.util.function.Supplier<io.smallrye.mutiny.Context>, int, java.util.function.Supplier<java.util.Queue<T>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.lang.Runnable)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.lang.Runnable)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super java.util.concurrent.Flow.Subscription>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super java.util.concurrent.Flow.Subscription>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method <T> io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniCreate::context(java.util.function.Function<io.smallrye.mutiny.Context, io.smallrye.mutiny.Uni<? extends T>>)",
          "new": "method <T> io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniCreate::context(java.util.function.Function<io.smallrye.mutiny.Context, io.smallrye.mutiny.Uni<? extends T>>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.groups.UniSubscribe<T>::asCompletionStage(io.smallrye.mutiny.Context)",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.groups.UniSubscribe<T>::asCompletionStage(io.smallrye.mutiny.Context)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.UniSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.UniSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "new": "method java.util.concurrent.CompletableFuture<T> io.smallrye.mutiny.Uni<T>::subscribeAsCompletionStage(io.smallrye.mutiny.Context) @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "interface io.smallrye.mutiny.subscription.ContextSupport",
          "new": "interface io.smallrye.mutiny.subscription.ContextSupport",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "interface io.smallrye.mutiny.subscription.DemandPacer",
          "new": "interface io.smallrye.mutiny.subscription.DemandPacer",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand pacing is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "class io.smallrye.mutiny.subscription.FixedDemandPacer",
          "new": "class io.smallrye.mutiny.subscription.FixedDemandPacer",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand pacing is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.GroupedMulti<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext()",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long)",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext()",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext()",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.groups.UniAwait<T> io.smallrye.mutiny.Uni<T>::awaitUsing(io.smallrye.mutiny.Context)",
          "new": "method io.smallrye.mutiny.groups.UniAwait<T> io.smallrye.mutiny.Uni<T>::awaitUsing(io.smallrye.mutiny.Context)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.helpers.BlockingIterable<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asIterable(java.util.function.Supplier<io.smallrye.mutiny.Context>)",
          "new": "method io.smallrye.mutiny.helpers.BlockingIterable<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asIterable(java.util.function.Supplier<io.smallrye.mutiny.Context>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method java.util.stream.Stream<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asStream(java.util.function.Supplier<io.smallrye.mutiny.Context>)",
          "new": "method java.util.stream.Stream<T> io.smallrye.mutiny.groups.MultiSubscribe<T>::asStream(java.util.function.Supplier<io.smallrye.mutiny.Context>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.MultiSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.UniSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>)",
          "new": "method io.smallrye.mutiny.subscription.Cancellable io.smallrye.mutiny.groups.UniSubscribe<T>::with(io.smallrye.mutiny.Context, java.util.function.Consumer<? super T>)",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniGlobalSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnCancellationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnItemOrFailureSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnItemSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnSubscribeSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.helpers.spies.UniOnTerminationSpy<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.AbstractMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.AbstractMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.AbstractMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.AbstractMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.AbstractUni<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.UniOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniAndCombination<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniDelayOnItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniDelayUntil<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniEmitOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniFailOnTimeout<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniLogger<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniMemoizeOp<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniNever<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnCancellation<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnCancellationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransform<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
          "new": "method io.smallrye.mutiny.Multi<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Multi<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
          "new": "method io.smallrye.mutiny.Multi<T> io.smallrye.mutiny.Multi<T>::capDemandsTo(long) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Demand capping is a new experimental API introduced in Mutiny 1.5.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToUni<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeCall<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnSubscribeInvoke<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnTermination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOnTerminationCall<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniOrCombination<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniRetryAtMost<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniRunSubscribeOn<I>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.UniWithContext<I, O>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.DeferredUniWithContext<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStage<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromCompletionStageWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromDeferredSupplierWithState<S, T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromEmitterWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFailureSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemSupplier<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromItemWithState<T, S>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownItem<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniJoinAll<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        },
        {
          "ignore": true,
          "code": "java.annotation.removed",
          "old": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "new": "method io.smallrye.mutiny.Uni<io.smallrye.mutiny.ItemWithContext<T>> io.smallrye.mutiny.Uni<T>::attachContext() @ io.smallrye.mutiny.operators.uni.builders.UniJoinFirst<T>",
          "annotation": "@io.smallrye.common.annotation.Experimental(\"Context support is a new experimental API introduced in Mutiny 1.3.0\")",
          "justification": "Experimental API promotion"
        }
      ]
    }
  },
  {
    "extension": "revapi.reporter.json",
    "configuration": {
      "minSeverity": "POTENTIALLY_BREAKING",
      "minCriticality": "documented",
      "output": "target/compatibility.json",
      "indent": true,
      "append": false,
      "keepEmptyFile": true
    }
  },
  {
    "extension": "revapi.reporter.text",
    "configuration": {
      "minSeverity": "POTENTIALLY_BREAKING",
      "minCriticality": "documented",
      "output": "out"
    }
  }
]